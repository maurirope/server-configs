geo $allow {
     # These IP blocks correspond to Uruguay
     default 0;
     192.168.1.0/24 1;
     45.6.248.0/21 1;
     45.228.64.0/23 1;
     45.228.66.0/24 1;
     69.164.91.0/24 1;
     69.164.98.0/24 1;
     131.0.212.0/22 1;
     138.59.12.0/22 1;
     138.99.44.0/22 1;
     152.156.0.0/16 1;
     161.0.120.0/21 1;
     164.73.0.0/16 1;
     167.56.0.0/13 1;
     167.108.0.0/16 1;
     167.116.0.0/16 1;
     168.121.184.0/22 1;
     170.247.168.0/22 1;
     179.0.156.0/22 1;
     179.24.0.0/13 1;
     186.8.0.0/16 1;
     186.48.0.0/13 1;
     190.0.128.0/19 1;
     190.64.0.0/16 1;
     190.99.96.0/20 1;
     190.108.0.0/19 1;
     190.112.52.0/22 1;
     190.112.192.0/22 1;
     190.112.200.0/22 1;
     190.132.0.0/14 1;
     192.146.237.0/24 1;
     200.0.68.0/23 1;
     200.0.86.0/23 1;
     200.0.88.0/24 1;
     200.0.204.0/22 1;
     200.2.32.0/19 1;
     200.3.12.0/22 1;
     200.7.84.0/22 1;
     200.10.60.0/22 1;
     200.12.155.0/24 1;
     200.12.156.0/24 1;
     200.35.152.0/22 1;
     200.40.0.0/16 1;
     200.58.128.0/19 1;
     200.71.0.0/19 1;
     200.93.240.0/21 1;
     200.108.192.0/18 1;
     200.115.72.0/21 1;
     200.124.192.0/19 1;
     200.125.0.0/18 1;
     201.217.128.0/18 1;
     201.219.224.0/21 1;
     201.219.252.0/22 1;
     201.221.0.0/18 1;
  }

# Default webserver router
server {
    listen 80 default_server;
    server_name __SUBDOMAIN.DOMAIN.XXX__;
    return 301 https://$host$request_uri;
}

# Settings for geo-block through filter
# documented at https://nginx.org/en/docs/http/ngx_http_geo_module.html
# and https://serverfault.com/questions/866099/how-to-deny-access-to-resources-based-on-x-forwarded-for-headers
#
# The geo module works like the map module, that is, a variable gets assigned values depending on the value of IP address.
# An example:
#  geo $allow {
#     default 0;
#     192.168.168.0/24 1;
#  }

#  server {
#     real_ip_header X-Forwarded-For;
#     set_real_ip_from 10.1.2.3;
#
#     if ($allow = 0) {
#         return 403;
#     }
#  }
# Here we assign the geo map, where the default value for $allow is 0.
# If the IP address is in subnet 192.168.168.0/24, then $allow will get value 1, and the request is allowed.
# You can have as many lines in the geo block as you need to define your IP ranges.



# # qBittorrent-nox Webserver
# server {
#     listen 443 ssl http2;
#     server_name SUBDOMAIN.DOMAIN.XXX;
#
#     ssl_certificate           __CERTIFICATE LOCATION__;
#    #ssl_trusted_certificate    __CERTIFICATE LOCATION__;
#     ssl_certificate_key       __CERTIFICATE LOCATION__;
#     ssl_ecdh_curve prime256v1:secp384r1:secp521r1;
#
#    #include __CERTIFICATE LOCATION__.conf;
#
#     add_header Strict-Transport-Security "max-age=31536000" always;
#     ssl_stapling on;
#     ssl_stapling_verify on;
#
#     access_log            __ACCESS LOG LOCATION__;
#
#     location / {
#         proxy_pass         https://127.0.0.1:8080/;
#         proxy_http_version 1.1;
#         http2_push_preload on;
#         proxy_set_header   Host               127.0.0.1:8080;
#         proxy_set_header   X-Forwarded-Proto  $scheme;
#         proxy_set_header   X-Forwarded-Host   $server_name:$server_port;
#         proxy_set_header   X-Forwarded-For    $remote_addr;
#         proxy_set_header   X-Real-IP          $remote_addr;
#       proxy_hide_header   Referer;
#       proxy_hide_header   Origin;
#       proxy_set_header    Referer           '';
#       proxy_set_header    Origin            '';
#
#         # optionally, you can adjust the POST request size limit, to allow adding a lot of torrents at once:
#         client_max_body_size 10M;
#
#         # since v4.2.2, is possible to configure qBittorrent
#         # to set the "Secure" flag for the session cookie automatically.
#         # However, that option does nothing unless using qBittorrent's built-in HTTPS functionality.
#         # For this use case, where qBittorrent itself is using plain HTTP
#         # (and regardless of whether or not the external website uses HTTPS),
#         # the flag must be set here, in the proxy configuration itself:
#         proxy_cookie_path / "/; Secure";
#     }
#
# }

# Jellyfin Webserver
server {
    listen 443 ssl;
    server_name __SUBDOMAIN.DOMAIN.XXX__;

    ## The default `client_max_body_size` is 1M, this might not be enough for some posters, etc.
    client_max_body_size 20M;

    # use a variable to store the upstream proxy
    # in this example we are using a hostname which is resolved via DNS
    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
    set $jellyfin 127.0.0.1;
    #resolver ns1.afraid.org ns2.afraid.org ns3.afraid.org ns4.afraid.org;

    ssl_certificate __CERTIFICATE LOCATION__;
    ssl_certificate_key __CERTIFICATE LOCATION__;
   #ssl_trusted_certificate __CERTIFICATE LOCATION__;
    #include __CERTIFICATE LOCATION__;
    #ssl_dhparam __CERTIFICATE LOCATION__;
    add_header Strict-Transport-Security "max-age=31536000" always;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security / XSS Mitigation Headers
    # NOTE: X-Frame-Options may cause issues with the webOS app
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    # NOTE: The default CSP headers may cause issues with the webOS app
    #add_header Content-Security-Policy "default-src https: data: blob: http://image.tmdb.org; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js https://www.gstatic.com/eureka/clank/95/cast_sender.js https://www.gstatic.com/eureka/clank/96/cast_sender.js https://www.gstatic.com/eureka/clank/97/cast_sender.js https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

    location = / {
        #return 302 http://$host/web/;
        return 302 http://$host/web/;
    }

    location / {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }

    #location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
    location = /web/ {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://$jellyfin:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    #Must be inside server block
    #Insert into all servers where you want filtering (e.g HTTP + HTTPS block)
    access_log /NGINXACCESSLOGLOCATION stripsecrets;

}

# Default web www
server {
    listen 443 ssl;
    server_name __SUBDOMAIN.DOMAIN.XXX___;
    root /var/www/html;
    index index.html;
    ssl_certificate __CERTIFICATE LOCATION__;
    ssl_certificate_key __CERTIFICATE LOCATION__;
    #ssl_trusted_certificate __CERTIFICATE LOCATION__;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=31536000" always;
    location / {
        try_files $uri $uri/ =404;
    }
}

server {
    listen 443 ssl;
    server_name __SUBDOMAIN.DOMAIN.XXX___;
    real_ip_header X-Forwarded-For;
    set_real_ip_from 127.0.0.1;
    allow 192.168.1.0/24;
    allow 127.0.0.1;
    deny all;
    location / {
        proxy_pass https://127.0.0.1:10000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
    ssl_certificate __CERTIFICATE LOCATION__;
    ssl_certificate_key __CERTIFICATE LOCATION__;
    #ssl_trusted_certificate __CERTIFICATE LOCATION__;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=31536000" always;
}
